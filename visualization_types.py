# -*- coding: utf-8 -*-
"""Visualization Types

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KoiR8mQeo-k0QbPmJORPycPWuIV1FilI
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# %matplotlib inline

"""#Global API
What is an API? API stands for Application Programming Interface which is a set of definitions and protocols for building and integrating application software.
"""

#Define the x-axis

x = np.arange(-10, 11)

#Name the plot and create the fig size which is figsize is the tuple of the width and height of the figure in inches.. 
plt.figure(figsize=(12, 6))

plt.title('My Nice Plot')

plt.plot(x, x ** 2)
plt.plot(x, -1 * (x ** 2))

#linspace means to start the count at -50 then next number is -49. Hence we are moving to the y-axis  gradually. 
#x**2 means raises the power to 2
plt.figure(figsize=(12, 6))
plt.title('My Nice Plot')

plt.subplot(1, 2, 1)  # rows, columns, panel selected
plt.plot(x, x ** 2)
plt.plot([0, 0, 0], [-10, 0, 100])
plt.legend(['X^2', 'Vertical Line'])
plt.xlabel('X')
plt.ylabel('X Squared')

plt.subplot(1, 2, 2)
plt.plot(x, -1 * (x ** 2))
plt.plot([-10, 0, 10], [-50, -50, -50])
plt.legend(['-X^2', 'Horizontal Line'])

plt.xlabel('X')
plt.ylabel('X Squared')

"""OOP Interface"""

fig, axes = plt.subplots(figsize=(12, 6))

axes.plot(
    x, (x ** 2), color='red', linewidth=3,
    marker='o', markersize=8, label='X^2')

axes.plot(x, -1 * (x ** 2), 'b--', label='-X^2')

axes.set_xlabel('X')
axes.set_ylabel('X Squared')

axes.set_title("My Nice Plot")

axes.legend()

fig

#Lines can be solid, dashed, and dashed dot.
#The linestyle means the line can have both a solid linestyle connecting all the vertices, and a marker at each vertex.
fig, axes = plt.subplots(figsize=(12, 6))

axes.plot(x, x + 0, linestyle='solid')
axes.plot(x, x + 1, linestyle='dashed')
axes.plot(x, x + 2, linestyle='dashdot')
axes.plot(x, x + 3, linestyle='dotted');

axes.set_title("My Nice Plot")

fig, axes = plt.subplots(figsize=(12, 6))

axes.plot(x, x + 0, '-og', label="solid green")
axes.plot(x, x + 1, '--c', label="dashed cyan")
axes.plot(x, x + 2, '-.b', label="dashdot blue")
axes.plot(x, x + 3, ':r', label="dotted red")

axes.set_title("My Nice Plot")

axes.legend()

print('Markers: {}'.format([m for m in plt.Line2D.markers]))

linestyles = ['_', '-', '--', ':']

print('Line styles: {}'.format(linestyles))

"""Other types of plots

Figures and subfigures
When we call the subplots() function we get a tuple containing a Figure and a axes element.
"""

#The line graph helps to determine the relationship between two sets of values
plot_objects = plt.subplots()

fig, ax = plot_objects

ax.plot([1,2,3], [1,2,3])

plot_objects

plot_objects = plt.subplots(nrows=2, ncols=2, figsize=(14, 6))

fig, ((ax1, ax2), (ax3, ax4)) = plot_objects

plot_objects

ax4.plot(np.random.randn(50), c='yellow')
ax1.plot(np.random.randn(50), c='red', linestyle='--')
ax2.plot(np.random.randn(50), c='green', linestyle=':')
ax3.plot(np.random.randn(50), c='blue', marker='o', linewidth=3.0)


fig

plt.figure(figsize=(14, 6))

ax1 = plt.subplot2grid((3,3), (0,0), colspan=3)
ax2 = plt.subplot2grid((3,3), (1,0), colspan=2)
ax3 = plt.subplot2grid((3,3), (1,2), rowspan=2)
ax4 = plt.subplot2grid((3,3), (2,0))
ax5 = plt.subplot2grid((3,3), (2,1))

"""Scatter Plot 

A scatter plot is a type of plot that shows the data as a collection of points
"""

#N = the number of dots or plots. 
N = 50
x = np.random.rand(N)
y = np.random.rand(N)
colors = np.random.rand(N)
area = np.pi * (20 * np.random.rand(N))**2  # 0 to 15 point radii

plt.figure(figsize=(14, 6))

plt.scatter(x, y, s=area, c=colors, alpha=0.5, cmap='Spectral')
plt.colorbar()

plt.show()

fig = plt.figure(figsize=(14, 6))

ax1 = fig.add_subplot(1,2,1)
plt.scatter(x, y, s=area, c=colors, alpha=0.5, cmap='Pastel1')
plt.colorbar()

ax2 = fig.add_subplot(1,2,2)
plt.scatter(x, y, s=area, c=colors, alpha=0.5, cmap='Pastel2')
plt.colorbar()

plt.show()

"""Histograms

A histogram is a bar graph-like representation of data that buckets a range of classes into columns along the horizontal x-axis.
The vertical y-axis represents the number count or percentage of occurrences in the data for each column

#Creating a Histogram

To create a histogram the first step is to create bin of the ranges, then distribute the whole range of the values into a series of intervals, and count the values which fall into each of the intervals.Bins are clearly identified as consecutive, non-overlapping intervals of variables.The matplotlib.pyplot.hist() function is used to compute and create histogram of
"""

values = np.random.randn(1000)

plt.subplots(figsize=(12, 6))

plt.hist(values, bins=100, alpha=0.8,
          histtype='bar', color='steelblue',
          edgecolor='green')
plt.xlim(xmin=-5, xmax=5)

plt.show()

fig.savefig('hist.png')

"""KDE (kernel density estimation)

it’s a technique that let’s you create a smooth curve given a set of data.This can be useful if you want to visualize just the “shape” of some data, as a kind of continuous replacement for the discrete histogram
"""

from scipy import stats

density = stats.kde.gaussian_kde(values)
density

plt.subplots(figsize=(12, 6))

values2 = np.linspace(min(values)-10, max(values)+10, 100)

plt.plot(values2, density(values2), color='#FF7F00')
plt.fill_between(values2, 0, density(values2), alpha=0.5, color='#FF7F00')
plt.xlim(xmin=-5, xmax=5)

plt.show()

"""Combine plots

pyplot.subplots creates a figure and a grid of subplots with a single call, while providing reasonable control over how the individual plots are created.
"""

plt.subplots(figsize=(12, 6))

plt.hist(values, bins=100, alpha=0.8, density=1,
          histtype='bar', color='steelblue',
          edgecolor='green')

plt.plot(values2, density(values2), color='#FF7F00', linewidth=3.0)
plt.xlim(xmin=-5, xmax=5)

plt.show()

"""Bar plots

Bar graph can be defined as a chart or a graphical representation of data, quantities or numbers using bars or strips. Bar graphs are used to compare and contrast numbers, frequencies or other measures of distinct categories of data.
"""

Y = np.random.rand(1, 5)[0]
Y2 = np.random.rand(1, 5)[0]

plt.figure(figsize=(12, 4))

barWidth = 0.5
plt.bar(np.arange(len(Y)), Y, width=barWidth, color='#00b894')

plt.show()

plt.figure(figsize=(12, 4))

barWidth = 0.5
plt.bar(np.arange(len(Y)), Y, width=barWidth, color='#00b894', label='Label Y')
plt.bar(np.arange(len(Y2)), Y2, width=barWidth, color='#e17055', bottom=Y, label='Label Y2')

plt.legend()
plt.show()

"""Boxplots and outlier detection
 A Box Plot is also known as Whisker plot is created to display the summary of the set of data values having properties like minimum, first quartile, median, third quartile and maximum.
"""

values = np.concatenate([np.random.randn(10), np.array([10, 15, -10, -15])])

plt.figure(figsize=(12, 4))

plt.hist(values)

plt.figure(figsize=(12, 4))

plt.boxplot(values)